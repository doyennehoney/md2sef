/**
 */
package rsgf.tree.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import rsgf.tree.util.TreeAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TreeItemProviderAdapterFactory extends TreeAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TreeItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsgf.tree.Tree} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TreeItemProvider treeItemProvider;

	/**
	 * This creates an adapter for a {@link rsgf.tree.Tree}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTreeAdapter() {
		if (treeItemProvider == null) {
			treeItemProvider = new TreeItemProvider(this);
		}

		return treeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsgf.tree.Root} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RootItemProvider rootItemProvider;

	/**
	 * This creates an adapter for a {@link rsgf.tree.Root}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRootAdapter() {
		if (rootItemProvider == null) {
			rootItemProvider = new RootItemProvider(this);
		}

		return rootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsgf.tree.CDEVSCoordinator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CDEVSCoordinatorItemProvider cdevsCoordinatorItemProvider;

	/**
	 * This creates an adapter for a {@link rsgf.tree.CDEVSCoordinator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCDEVSCoordinatorAdapter() {
		if (cdevsCoordinatorItemProvider == null) {
			cdevsCoordinatorItemProvider = new CDEVSCoordinatorItemProvider(this);
		}

		return cdevsCoordinatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsgf.tree.PDEVSCoordinator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PDEVSCoordinatorItemProvider pdevsCoordinatorItemProvider;

	/**
	 * This creates an adapter for a {@link rsgf.tree.PDEVSCoordinator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPDEVSCoordinatorAdapter() {
		if (pdevsCoordinatorItemProvider == null) {
			pdevsCoordinatorItemProvider = new PDEVSCoordinatorItemProvider(this);
		}

		return pdevsCoordinatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsgf.tree.FlatCoordinator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlatCoordinatorItemProvider flatCoordinatorItemProvider;

	/**
	 * This creates an adapter for a {@link rsgf.tree.FlatCoordinator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlatCoordinatorAdapter() {
		if (flatCoordinatorItemProvider == null) {
			flatCoordinatorItemProvider = new FlatCoordinatorItemProvider(this);
		}

		return flatCoordinatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsgf.tree.NodeCoordinator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeCoordinatorItemProvider nodeCoordinatorItemProvider;

	/**
	 * This creates an adapter for a {@link rsgf.tree.NodeCoordinator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeCoordinatorAdapter() {
		if (nodeCoordinatorItemProvider == null) {
			nodeCoordinatorItemProvider = new NodeCoordinatorItemProvider(this);
		}

		return nodeCoordinatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsgf.tree.P_Coordinator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected P_CoordinatorItemProvider p_CoordinatorItemProvider;

	/**
	 * This creates an adapter for a {@link rsgf.tree.P_Coordinator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createP_CoordinatorAdapter() {
		if (p_CoordinatorItemProvider == null) {
			p_CoordinatorItemProvider = new P_CoordinatorItemProvider(this);
		}

		return p_CoordinatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsgf.tree.CDEVSSimulator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CDEVSSimulatorItemProvider cdevsSimulatorItemProvider;

	/**
	 * This creates an adapter for a {@link rsgf.tree.CDEVSSimulator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCDEVSSimulatorAdapter() {
		if (cdevsSimulatorItemProvider == null) {
			cdevsSimulatorItemProvider = new CDEVSSimulatorItemProvider(this);
		}

		return cdevsSimulatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsgf.tree.PDEVSSimulator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PDEVSSimulatorItemProvider pdevsSimulatorItemProvider;

	/**
	 * This creates an adapter for a {@link rsgf.tree.PDEVSSimulator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPDEVSSimulatorAdapter() {
		if (pdevsSimulatorItemProvider == null) {
			pdevsSimulatorItemProvider = new PDEVSSimulatorItemProvider(this);
		}

		return pdevsSimulatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsgf.tree.P_Simulator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected P_SimulatorItemProvider p_SimulatorItemProvider;

	/**
	 * This creates an adapter for a {@link rsgf.tree.P_Simulator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createP_SimulatorAdapter() {
		if (p_SimulatorItemProvider == null) {
			p_SimulatorItemProvider = new P_SimulatorItemProvider(this);
		}

		return p_SimulatorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (treeItemProvider != null) treeItemProvider.dispose();
		if (rootItemProvider != null) rootItemProvider.dispose();
		if (cdevsCoordinatorItemProvider != null) cdevsCoordinatorItemProvider.dispose();
		if (pdevsCoordinatorItemProvider != null) pdevsCoordinatorItemProvider.dispose();
		if (flatCoordinatorItemProvider != null) flatCoordinatorItemProvider.dispose();
		if (nodeCoordinatorItemProvider != null) nodeCoordinatorItemProvider.dispose();
		if (p_CoordinatorItemProvider != null) p_CoordinatorItemProvider.dispose();
		if (cdevsSimulatorItemProvider != null) cdevsSimulatorItemProvider.dispose();
		if (pdevsSimulatorItemProvider != null) pdevsSimulatorItemProvider.dispose();
		if (p_SimulatorItemProvider != null) p_SimulatorItemProvider.dispose();
	}

}
