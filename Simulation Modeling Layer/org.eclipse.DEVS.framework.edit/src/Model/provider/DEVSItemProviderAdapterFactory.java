/**
 */
package Model.provider;

import Model.util.DEVSAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DEVSItemProviderAdapterFactory extends DEVSAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DEVSItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link Model.AtomicDEVS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomicDEVSItemProvider atomicDEVSItemProvider;

	/**
	 * This creates an adapter for a {@link Model.AtomicDEVS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtomicDEVSAdapter() {
		if (atomicDEVSItemProvider == null) {
			atomicDEVSItemProvider = new AtomicDEVSItemProvider(this);
		}

		return atomicDEVSItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Model.CoupledDEVS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoupledDEVSItemProvider coupledDEVSItemProvider;

	/**
	 * This creates an adapter for a {@link Model.CoupledDEVS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoupledDEVSAdapter() {
		if (coupledDEVSItemProvider == null) {
			coupledDEVSItemProvider = new CoupledDEVSItemProvider(this);
		}

		return coupledDEVSItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Model.IPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IPortItemProvider iPortItemProvider;

	/**
	 * This creates an adapter for a {@link Model.IPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIPortAdapter() {
		if (iPortItemProvider == null) {
			iPortItemProvider = new IPortItemProvider(this);
		}

		return iPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Model.OPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OPortItemProvider oPortItemProvider;

	/**
	 * This creates an adapter for a {@link Model.OPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOPortAdapter() {
		if (oPortItemProvider == null) {
			oPortItemProvider = new OPortItemProvider(this);
		}

		return oPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Model.EIC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EICItemProvider eicItemProvider;

	/**
	 * This creates an adapter for a {@link Model.EIC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEICAdapter() {
		if (eicItemProvider == null) {
			eicItemProvider = new EICItemProvider(this);
		}

		return eicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Model.IC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ICItemProvider icItemProvider;

	/**
	 * This creates an adapter for a {@link Model.IC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createICAdapter() {
		if (icItemProvider == null) {
			icItemProvider = new ICItemProvider(this);
		}

		return icItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Model.EOC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EOCItemProvider eocItemProvider;

	/**
	 * This creates an adapter for a {@link Model.EOC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEOCAdapter() {
		if (eocItemProvider == null) {
			eocItemProvider = new EOCItemProvider(this);
		}

		return eocItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Model.IntTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntTransitionItemProvider intTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link Model.IntTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntTransitionAdapter() {
		if (intTransitionItemProvider == null) {
			intTransitionItemProvider = new IntTransitionItemProvider(this);
		}

		return intTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Model.ConfTrans} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfTransItemProvider confTransItemProvider;

	/**
	 * This creates an adapter for a {@link Model.ConfTrans}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfTransAdapter() {
		if (confTransItemProvider == null) {
			confTransItemProvider = new ConfTransItemProvider(this);
		}

		return confTransItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Model.ExtTrans} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtTransItemProvider extTransItemProvider;

	/**
	 * This creates an adapter for a {@link Model.ExtTrans}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtTransAdapter() {
		if (extTransItemProvider == null) {
			extTransItemProvider = new ExtTransItemProvider(this);
		}

		return extTransItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Model.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link Model.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Model.Phase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhaseItemProvider phaseItemProvider;

	/**
	 * This creates an adapter for a {@link Model.Phase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhaseAdapter() {
		if (phaseItemProvider == null) {
			phaseItemProvider = new PhaseItemProvider(this);
		}

		return phaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Model.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link Model.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (atomicDEVSItemProvider != null) atomicDEVSItemProvider.dispose();
		if (coupledDEVSItemProvider != null) coupledDEVSItemProvider.dispose();
		if (iPortItemProvider != null) iPortItemProvider.dispose();
		if (oPortItemProvider != null) oPortItemProvider.dispose();
		if (eicItemProvider != null) eicItemProvider.dispose();
		if (icItemProvider != null) icItemProvider.dispose();
		if (eocItemProvider != null) eocItemProvider.dispose();
		if (intTransitionItemProvider != null) intTransitionItemProvider.dispose();
		if (confTransItemProvider != null) confTransItemProvider.dispose();
		if (extTransItemProvider != null) extTransItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (phaseItemProvider != null) phaseItemProvider.dispose();
		if (variableItemProvider != null) variableItemProvider.dispose();
	}

}
